# -*- coding: utf-8 -*-
"""ProjetL3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/138tXqjGAf8WjfVcU0oRmQL_vgWwn8G6X
"""

from sklearn import tree
import numpy as np
import pandas as pd
import seaborn as sns
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn.tree import export_text, plot_tree
from sklearn import metrics

#
# 
# brief : Affichage des features  
#

df = pd.read_csv("/content/voice.csv")
features = df.columns
print(features)
#df.head()

df.describe()

#
# 
# brief : Affichage des cibles  
#

y = df['label']
print(y)

#
# 
# brief : Création de la matrice de données  
#

Selected_features = ['meanfreq','sd','median','Q25','Q75','IQR','skew','kurt','sp.ent','sfm','mode','centroid','meanfun','minfun','maxfun',
        'meandom', 'mindom', 'maxdom', 'dfrange', 'modindx']
#Selected_features = ['meanfreq']
X = df[Selected_features]
X.head

#
# 
# brief : Création d'un dataset d'entrainement 
#

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=1/2, stratify=y)
print('Train dataset:', X_train.shape, 'Test dataset:', X_test.shape)
X_train

#
# 
# brief : Création d'un classifier (DecisionTree) et entrainement du modéle 
#

classifier = DecisionTreeClassifier(max_depth=100, random_state=42, criterion='entropy')
classifier.fit(X_train, y_train)

#
# 
# brief : Affichage du DecisionTree
#

decision_tree_text = export_text(classifier, feature_names=list(X_train.columns))
print(decision_tree_text)

#
# 
# brief : Affichage du DecisionTree
#

plt.figure(figsize=(38,25))
plot_tree(classifier, feature_names=list(X_train.columns),  class_names=y.unique(), precision=2, filled=True, fontsize=10)

#
# 
# brief : Prediction et test de performance du modele 
#

y_pred_train = classifier.predict(X_train)
y_pred_test = classifier.predict(X_test)
accuracy_train = metrics.accuracy_score(y_train, y_pred_train)
accuracy_test = metrics.accuracy_score(y_test, y_pred_test)
print('Train accuracy:', '{:.2f}'.format(accuracy_train), 'Test accuracy:', '{:.2f}'.format(accuracy_test))

import pickle
# output = open("output.pickle","wb")
# pickle.dump(df,output)
# output.close()
pickle.dump(classifier,open('/content/result.pkl','wb'))

model_loaded = pickle.load(open('/content/result.pkl', 'rb'))

model_loaded.predict(X_test)